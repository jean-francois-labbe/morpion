# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.


# Where to find user code.
SRC_DIR = src
ODIR= obj
SRC =$(wildcard $(SRC_DIR)/*.c)
OBJ_SRC = $(SRC:.c=.o)
OBJS = $(patsubst %,$(ODIR)/%,$(OBJ_SRC))


GTK_DIR=$(SRC_DIR)/GTK
GTK_SRC =$(wildcard $(GTK_DIR)/*.c)
GTK_OBJ = $(GTK_SRC:.c=.o)
GTK_OBJS = $(patsubst %,$(ODIR)/%,$(GTK_OBJ))


COMMANDE_LINE_DIR=$(SRC_DIR)/commandLine
COMMANDE_LINE_SRC =$(wildcard $(COMMANDE_LINE_DIR)/*.c)
COMMANDE_LINE_OBJ = $(COMMANDE_LINE_SRC:.c=.o)
COMMANDE_LINE_OBJS = $(patsubst %,$(ODIR)/%,$(COMMANDE_LINE_OBJ))


SRC_WITHOUTMAIN=$(subst $(SRC_DIR)/main.c,,$(SRC) )
OBJ_SRC_WITHOUTMAIN = $(SRC_WITHOUTMAIN:.c=.o)
OBJS_WITHOUTMAIN = $(patsubst %,$(ODIR)/%,$(OBJ_SRC_WITHOUTMAIN))


# Remember to tweak this if you move this file.
GTEST_DIR = tests/gtest-1.6.0
TEST_DIR = tests/unitTests
TESTS_SRC=$(wildcard $(TEST_DIR)/*.c)
OBJ_TEST = $(TESTS_SRC:.c=.o)
OBJS_TEST = $(patsubst %,$(ODIR)/%,$(OBJ_TEST))

# Flags passed to the preprocessor.
CPPFLAGS += -I$(SRC_DIR) -I$(GTEST_DIR)/include  `pkg-config --libs --cflags gtk+-2.0`

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra
CXXFLAGS_TESTS+=-fprofile-arcs -ftest-coverage
# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = unit_tests
GAME=OXO

all : $(GAME)

clean :
	rm -f $(GAME) $(GAME)_GTK  $(TESTS) $(OBJS) $(OBJS_TEST) *.gcno *.gcda *~ *.gcov *.xml *.o


# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.

# on utilise directement la librairie de test sans la recompiler Ã  chaque fois.

#gtest-all.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
#            $(GTEST_DIR)/src/gtest-all.cc

#gtest_main.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
#            $(GTEST_DIR)/src/gtest_main.cc

#gtest.a : gtest-all.o
#	$(AR) $(ARFLAGS) $@ $^

#$(GTEST_DIR)/gtest_main.a : gtest-all.o gtest_main.o
#	$(AR) $(ARFLAGS) $@ $^

##########################################################################################

GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

$(ODIR)/%.o : %.c
	g++ $(CPPFLAGS) $(CXXFLAGS) $(CXXFLAGS_TESTS) -o $@ -c $<

$(GAME): $(OBJS) $(COMMANDE_LINE_OBJS)
	@echo "Build Game"
	g++ $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
	@echo ""
	@echo "Finished"

$(GAME)_GTK: $(OBJS) $(GTK_OBJS)
	@echo "Build Game"
	g++ $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
	@echo ""
	@echo "Finished"

unit_tests : $(GTEST_DIR)/gtest_main.a $(OBJS_WITHOUTMAIN) $(OBJS_TEST)
	@echo ""
	@echo "Build unit tests"
	@echo ""	
	g++ $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lgcov
	@echo ""
	@echo "Finished"

execute:
	./unit_tests
